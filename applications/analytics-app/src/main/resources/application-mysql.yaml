retail:
  favorites:
    top:
      sql: "SELECT data, total_quantity
    from products p,
    (SELECT sum(quantity) total_quantity,
    product_id
    FROM customer_orders
    WHERE customer_id = ?
    GROUP BY product_id order by total_quantity
    DESC
    limit ? ) top_orders
    WHERE p.id = top_orders.product_id"
  frequent:
    bought:
      sql: "select distinct p.data
                from (
                SELECT c.original_SKU as original_SKU, c.bought_with as bought_with, count(*) as times_bought_together
                FROM (
                  SELECT a.product_id as original_SKU, b.product_id as bought_with
                  FROM customer_orders a
                  INNER join customer_orders b
                  ON a.order_id = b.order_id AND a.product_id != b.product_id ) c
                GROUP BY c.original_SKU, c.bought_with
                having original_SKU in (:productIds)  and bought_with not in (:productIds)
                ORDER BY times_bought_together desc
                limit 10) top_associations,
                (select product_id, sum(quantity) as product_cnt
                      from customer_orders
                      group by product_id) count_by_product,
                products p
                where count_by_product.product_id = top_associations.original_SKU
                and cast(top_associations.times_bought_together as decimal(20,20))/
                cast(count_by_product.product_cnt as decimal(20,20)) > :confidence
                and  p.id = top_associations.bought_with"
  product:
    save:
      sql: "INSERT INTO products(id, data) 
                VALUES (:id,:data)
                ON DUPLICATE KEY 
                UPDATE data = :data"
spring:
  liquibase:
    change-log: "classpath:db/changelog/mysql/changelog-v1.sql"